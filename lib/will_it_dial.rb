module WillItDial
  class US
    
    attr_reader :number

    def self.check(num)
      inst = self.new(num)
      inst.check
    end

    def initialize(phonenumber)
      self.number = phonenumber
    end
    
    def check
      !(invalid? || suspicious? || banned?)
    end

    def invalid?
      too_short? || fake_area_code? || fake_exchange_code?
    end
    
    def suspicious?
      (!!number.match(/1234/) || same_numbers?(number[-4,4]) || (unique_numbers(number) <= 2) || duplicates?)
    end
    
    def banned?
      banned_numbers.include?(number[3,8])
    end
    
    def valid?
      !invalid?
    end

    def number=(phonenumber)
      @number = phonenumber.gsub(/[^0-9]/, '')
      if @number[0,1].to_i == 1
        @number = @number[1, @number.length - 1]
      end
    end

    def too_short?(len = 10)
      number.length < len
    end

    def duplicates?(max_dupes = 7)
      num_arr = number.split('')
      num_arr[0,num_arr.length - max_dupes + 1].each_with_index do |n,i|
        if same_numbers?(num_arr[i,max_dupes])
          return true
        end
      end
      false
    end

    def fake_exchange_code?
      # Per wikipedia, no x11 or 0xx 1xx exchange codes
      (number[3,1].to_i == 1) || (number[3,1].to_i == 0) || (number[4,2].to_i == 11)
    end

    def fake_area_code?
      !all_area_codes.include?(number[0,3])
    end

    private

    # pass in an array of numbers and see if they are the same
    def same_numbers?(num_arr)
      if num_arr.is_a? String
        num_arr = num_arr.split('')
      end
      na = num_arr.dup
      na.delete(na.first)
      na.empty?
    end
    
    def unique_numbers(num_arr)
      if num_arr.is_a? String
        num_arr = num_arr.split('')
      end
      num_arr.uniq.size
    end

    def all_area_codes
      ["201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "212", "213", "214", "215", "216", "217", "218", "219", "224", "225", "226", "227", "228", "229", "231", "234", "236", "239", "240", "242", "246", "248", "249", "250", "251", "252", "253", "254", "256", "260", "262", "264", "267", "268", "269", "270", "274", "276", "281", "283", "284", "289", "301", "302", "303", "304", "305", "306", "307", "308", "309", "310", "312", "313", "314", "315", "316", "317", "318", "319", "320", "321", "323", "325", "327", "330", "331", "334", "336", "337", "339", "340", "341", "343", "345", "347", "351", "352", "360", "361", "364", "369", "380", "385", "386", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410", "412", "413", "414", "415", "416", "417", "418", "419", "423", "424", "425", "430", "432", "434", "435", "438", "440", "441", "442", "443", "445", "447", "450", "458", "464", "469", "470", "473", "475", "478", "479", "480", "484", "501", "502", "503", "504", "505", "506", "507", "508", "509", "510", "512", "513", "514", "515", "516", "517", "518", "519", "520", "530", "531", "534", "539", "540", "541", "551", "557", "559", "561", "562", "563", "564", "567", "570", "571", "573", "574", "575", "579", "580", "581", "585", "586", "587", "601", "602", "603", "604", "605", "606", "607", "608", "609", "610", "612", "613", "614", "615", "616", "617", "618", "619", "620", "623", "626", "627", "628", "630", "631", "636", "641", "646", "647", "649", "650", "651", "657", "659", "660", "661", "662", "664", "667", "669", "670", "671", "678", "679", "681", "682", "684", "689", "701", "702", "703", "704", "705", "706", "707", "708", "709", "712", "713", "714", "715", "716", "717", "718", "719", "720", "721", "724", "727", "730", "731", "732", "734", "737", "740", "747", "754", "757", "758", "760", "762", "763", "764", "765", "767", "769", "770", "772", "773", "774", "775", "778", "779", "780", "781", "784", "785", "786", "787", "801", "802", "803", "804", "805", "806", "807", "808", "809", "810", "812", "813", "814", "815", "816", "817", "818", "819", "825", "828", "829", "830", "831", "832", "835", "843", "845", "847", "848", "849", "850", "856", "857", "858", "859", "860", "862", "863", "864", "865", "867", "868", "869", "870", "872", "876", "878", "901", "902", "903", "904", "905", "906", "907", "908", "909", "910", "912", "913", "914", "915", "916", "917", "918", "919", "920", "925", "928", "931", "935", "936", "937", "938", "939", "940", "941", "947", "949", "951", "952", "954", "956", "959", "970", "971", "972", "973", "975", "978", "979", "980", "984", "985", "989"]
    end

    def banned_numbers
      ['5551212']
    end


  end
end

def WillItDial(num)
  WillItDial::US.check(num)
end